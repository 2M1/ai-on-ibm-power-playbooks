---
- name: Install Build Environment Required.
  hosts: techzone
  tasks:

  #  - name: Set Path
  #    become: true
  #    become_user: root
  #    ansible.builtin.lineinfile:
  #     dest: /etc/profile.d/path.sh
  #     line: export PATH="/usr/local/bin:$PATH:{{ go_path }}/bin:{{ cmake_path }}/bin"
  #     owner: root
  #     state: present
  #     insertafter: EOF
  #     create: true
  #     mode: a=r,u=rw

  #  - name: Add yum Centos CRP repo
  #    become: true
  #    become_user: root
  #    ansible.builtin.yum_repository:
  #     name: CRB
  #     description: CRB repo. Added by ansible milvus install script.
  #     baseurl: https://mirror.stream.centos.org/9-stream/CRB/ppc64le/os

  #  - name: Add yum Centos AppStream repo
  #    become: true
  #    become_user: root
  #    ansible.builtin.yum_repository:
  #     name: AppStream
  #     description: AppStream repo. Added by ansible milvus install script.
  #     baseurl: https://mirror.stream.centos.org/9-stream/AppStream/ppc64le/os

  #  - name: Add yum Centos BaseOS repo
  #    become: true
  #    become_user: root
  #    ansible.builtin.yum_repository:
  #     name: BaseOS
  #     description: BaseOS repo. Added by ansible milvus install script.
  #     baseurl: https://mirror.stream.centos.org/9-stream/BaseOS/ppc64le/os

  #  - name: Import key
  #    become: true
  #    become_user: root
  #    ansible.builtin.rpm_key:
  #     state: present
  #     key: https://www.centos.org/keys/RPM-GPG-KEY-CentOS-Official

  #  - name: Install epel RPM
  #    become: true
  #    become_user: root
  #    ansible.builtin.dnf:
  #     name: 
  #       - https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm
  #       - bzip2
  #     state: present


  #  - name: Install yum dependencies
  #    become: true
  #    become_user: root
  #    ansible.builtin.command: 
  #     cmd: >
  #      yum install -y --allowerasing  make wget git sudo curl zip unzip tar diffutils pkg-config python3-devel
  #      perl-IPC-Cmd perl-Digest-SHA perl-FindBin perl-File-Compare openssl-devel scl-utils openblas-devel rust
  #      cargo gcc gcc-c++ libstdc++-static which libaio libuuid-devel ncurses-devel ccache libtool m4 autoconf
  #      automake ninja-build zlib-devel libffi-devel gfortran yum-utils patchelf hdf5-devel sqlite-devel bzip2-devel
  #      xz-devel perl-open.noarch

   - name: Create tmp dir
     ansible.builtin.tempfile:
      state: directory
     register: dload_dir

#    - name: Ensure cargo path exists
#      ansible.builtin.shell:
#       cmd: mkdir -p $HOME/.cargo/bin/

  
# - name: Install mamba and python dependencies
#   hosts: techzone
#   tasks:
#   - name: "Check if micromamba already exists in {{ micromamba_location }}"
#     ansible.builtin.stat:
#       path: "{{ micromamba_location }}"
#     register: mamba_stat

#   - name: Install micromamba
#     ansible.builtin.import_tasks: ../../download-and-extract-micromamba.yml
#     when: not mamba_stat.stat.exists

#   - name: Check install env
#     ansible.builtin.shell: 
#       cmd: micromamba env list | grep milvus_install | cut -f3 -d" "
#     register: mamba_install_env

#   - name: Copy env file
#     ansible.builtin.copy:
#       src: install-mamba-env.yml
#       dest: "{{ dload_dir.path }}/mamba-env-install.yml"
#     when: mamba_install_env.stdout != "milvus_install"

#   - name: create python install env
#     ansible.builtin.command:
#         argv:
#           - micromamba
#           - create
#           - --root-prefix 
#           - "{{ conda_dir }}"
#           - --yes
#           - -f
#           - "{{ dload_dir.path }}/mamba-env-install.yml"
#     when: mamba_install_env.stdout != "milvus_install"

#   - name: install python build dependencies
#     ansible.builtin.command:
#       cmd: micromamba run --root-prefix {{ conda_dir }} -n milvus_install pip install conan==1.64.1 setuptools==59.5.0
#     when: mamba_install_env.stdout != "milvus_install"

#   vars:
#     arch: linux-ppc64le
#     version: latest

# - name: Install go 
#   hosts: techzone
#   tasks:
#    - name: Check for go
#      ansible.builtin.stat:
#       path: "{{ go_path }}/bin/go"
#      register: go_stat

#    - name: Download go
#      ansible.builtin.get_url:
#       url: https://go.dev/dl/go{{ go_version }}.linux-ppc64le.tar.gz
#       decompress: true
#       dest: "{{ dload_dir.path }}/go.tar.gz"
#       mode: u+rw
#      when: not go_stat.stat.exists

#    - name: Extract go
#      become: true
#      become_user: root
#      ansible.builtin.unarchive:
#       dest: "{{ go_path | dirname }}"
#       src: "{{ dload_dir.path }}/go.tar.gz"
#       remote_src: true
#       # cmd: tar xzf -C {{ go_path }} {{ dload_dir.path }}/go.tar.gz
#      when: not go_stat.stat.exists

#    - name: Get Go Version
#      ansible.builtin.command: go version
#      register: go_version
#      changed_when: false

#    - name: Print Go Version
#      ansible.builtin.debug:
#       msg: "{{ go_version.stdout }}"

- name: Install (compile) cmake
  hosts: techzone
# cmake:
  tasks: 
  # NOTE: preexisting cmake versions do not help, since conan needs to copy all build artefacts.
  - name: Download cmake {{ cmake_version }}
    ansible.builtin.get_url:
      url: https://github.com/Kitware/CMake/releases/download/v{{ cmake_version }}/cmake-{{ cmake_version }}.tar.gz
      dest: "{{ dload_dir.path }}/cmake.tar.gz"
      mode: a+rw

  - name: Extract cmake
    become: true
    become_user: root
    ansible.builtin.unarchive:
      src: "{{ dload_dir.path }}/cmake.tar.gz"
      dest: "{{ dload_dir.path }}"
      remote_src: true

  - name: Run cmake bootstrap
    become: true
    become_user: root
    ansible.builtin.shell:
      cmd: ./bootstrap --prefix={{ cmake_path }} --parallel=$(nproc) -- -DBUILD_TESTING:BOOL=OFF -DCMAKE_BUILD_TYPE:STRING=Release -DCMAKE_USE_OPENSSL:BOOL=ON
      chdir: "{{ dload_dir.path }}/cmake-{{ cmake_version }}"

  - name: Build and install cmake {{ cmake_version }}
    become: true
    become_user: root
    ansible.builtin.shell:
      chdir: "{{ dload_dir.path }}/cmake-{{ cmake_version }}"
      # full paths since the root shell (using /bin/sh) does not parse /etc/profile.d/
      cmd: "{{ micromamba_location }} run -n milvus_install --root-prefix {{ conda_dir }} make install -j$(nproc)"

  - name: Check cmake version
    ansible.builtin.command: 
      cmd: cmake --version | head -1 | cut -f3 -d" "
    changed_when: false
    register: new_cmake_version

  - name: Print cmake version
    ansible.builtin.debug:
     msg: "{{ new_cmake_version.stdout }}"

  - name: Make cmake build env read/write
    become: true
    become_user: root
    ansible.builtin.file:
     path: "{{ dload_dir.path }}/cmake-{{ cmake_version }}"
     mode: u+rw
     owner: "{{ ansible_user }}"
     recurse: true

  - name: Register cmake with conan
    block:
     - name: Upload Conan file
       ansible.builtin.copy:
        src: "conanfile-cmake.py"
        dest: "{{ dload_dir.path }}/cmake-{{ cmake_version }}/conanfile.py"
        mode: u=rx,g=r,o=r

    #  - name: Insert cmake version into template conan file
    #    ansible.builtin.command:
    #     cmd: sed -i -e "s/%{ cmake_version }%/{{ cmake_version }}/g" {{ dload_dir.path }}/cmake-{{ cmake_version }}/conanfile.py

     - name: Insert cmake version into template
       ansible.builtin.replace:
        path: "{{ dload_dir.path }}/cmake-{{ cmake_version }}/conanfile.py"
        regexp: "%{ cmake_version }%"
        replace: "{{ cmake_version }}"

     - name: Register cmake with conan
       ansible.builtin.command:
        chdir: "{{ dload_dir.path }}/cmake-{{ cmake_version }}"
        argv:
         - micromamba
         - run
         - --root-prefix={{ conda_dir }}
         - -n
         - milvus_install
         - conan
         - export-pkg
         - .
         - cmake/{{ cmake_version }}@
         - -s
         - os=Linux
         - -s
         - arch=ppc64le
         - -f

     - name: Upadte libstd c++ version in use
       ansible.builtin.command:
        argv:
         - micromamba
         - run
         - --root-prefix={{ conda_dir }}
         - -n
         - milvus_install
         - conan
         - profile
         - update
         - settings.compiler.libcxx=libstdc++11
         - default

# Cleanup:
- name: Cleanup
  hosts: techzone
  tasks:
   - name: Remove tmpdir
     become: true
     become_user: root
     ansible.builtin.file:
      path: "{{ dload_dir.path }}"
      state: absent
     when: dload_dir.path is defined
